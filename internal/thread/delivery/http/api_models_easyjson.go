// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package http

import (
	json "encoding/json"
	models "github.com/SlavaShagalov/vk-dbms-project/internal/models"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp(in *jlexer.Lexer, out *updateResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "nickname":
			out.Nickname = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "about":
			out.About = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp(out *jwriter.Writer, in updateResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v updateResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v updateResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *updateResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *updateResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp(l, v)
}
func easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp1(in *jlexer.Lexer, out *updateRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fullname":
			out.Fullname = string(in.String())
		case "about":
			out.About = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp1(out *jwriter.Writer, in updateRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v updateRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v updateRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *updateRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *updateRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp1(l, v)
}
func easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp2(in *jlexer.Lexer, out *getResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "nickname":
			out.Nickname = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "about":
			out.About = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp2(out *jwriter.Writer, in getResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v getResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v getResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *getResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *getResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp2(l, v)
}
func easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp3(in *jlexer.Lexer, out *createResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "nickname":
			out.Nickname = string(in.String())
		case "fullname":
			out.Fullname = string(in.String())
		case "about":
			out.About = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp3(out *jwriter.Writer, in createResponse) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"nickname\":"
		out.RawString(prefix)
		out.String(string(in.Nickname))
	}
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix)
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v createResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v createResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *createResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *createResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp3(l, v)
}
func easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp4(in *jlexer.Lexer, out *createRequest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "fullname":
			out.Fullname = string(in.String())
		case "about":
			out.About = string(in.String())
		case "email":
			out.Email = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp4(out *jwriter.Writer, in createRequest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"fullname\":"
		out.RawString(prefix[1:])
		out.String(string(in.Fullname))
	}
	{
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v createRequest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v createRequest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *createRequest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *createRequest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp4(l, v)
}
func easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp5(in *jlexer.Lexer, out *createAlreadyExistsResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(createAlreadyExistsResponse, 0, 0)
			} else {
				*out = createAlreadyExistsResponse{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 models.User
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp5(out *jwriter.Writer, in createAlreadyExistsResponse) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v createAlreadyExistsResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v createAlreadyExistsResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonC0ea9389EncodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *createAlreadyExistsResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *createAlreadyExistsResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonC0ea9389DecodeGithubComSlavaShagalovVkDbmsProjectInternalThreadDeliveryHttp5(l, v)
}
